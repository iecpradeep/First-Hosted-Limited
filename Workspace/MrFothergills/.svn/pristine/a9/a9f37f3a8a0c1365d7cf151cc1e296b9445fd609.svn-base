/*****************************************************************************
 *	Name		:	reverseRevenueInvoice_UE.js
 *	Script Type	:	user event - After Record Submit "Item Fulfillment". 
 *	Applies To	: 	item Fulfilment
 *
 *	Client		: 	Mr. Fothergills
 *
 *	Version		:	1.0.0 - 07/05/2013  First Release - AS
 *					1.0.1 - 16/05/2013 - making the journals when the status is set to 'Shipped' - AS
 *					1.0.2 - 24/06/2013 - including making of journals for P&P items as well - AS
 *					
 * 	Author		:	FHL 
 * 	Purpose		:	To reverse the deferred revenue that has been reversed in Invoices
 * 					(create journals for fulfilment line items)
 * 
 * 	Script		: 	customscript_reversedrfulfilment  
 * 	Deploy		:   customdeploy_reversedrfulfilment
 * 
 * 	Library		: library.js
 * 
 ***************************************************************************/

var DEFERREDREVENUEACCOUNTNUMBER = 0;
var ItemRevenueAccountIntID = 0;
var deferredRevenueAccountIntID = 0;
var customerIntID = 0;
var departmentIntID = 0;
var locationIntID = 0;
var fulfilmentDate = '';
var fulfilmentID = 0;
var createdFromrecordIntID = 0;
var itemIntId = 0;
var itemRate = 0.00;
var itemQuantity = 0;
var itemAmount = 0.00;
var fulfillRecord = '';
var salesOrderRecord = '';
var itemType = '';
var serviceItemFlag = 'F';
var ItemFound = 'F';

var SOItemIntId =0;

/**********************************************************************
 * calculateKitPackAvgCost Function - the main function
 * 
 **********************************************************************/
function reverseRevenue(type)
{
	if(type == 'create' || type == 'edit')
	{

		//initialising the static variables use in the script
		initialise();

		//doing the processing
		process();
	}

}


/**********************************************************************
 * initialise Function - initialising the static variables used in the script
 * 
 **********************************************************************/
function initialise()
{ 
	var fulfilmentIntID = 0;

	try
	{
		DEFERREDREVENUEACCOUNTNUMBER = '24160';

		//getting the internal id of the account to be credited
		deferredRevenueAccountIntID = genericSearch('account', 'number', DEFERREDREVENUEACCOUNTNUMBER);

		//to get the transaction ID of the currently creating record
		fulfilmentIntID = nlapiGetRecordId();
		fulfillRecord = nlapiLoadRecord('itemfulfillment', fulfilmentIntID);
		fulfilmentID = fulfillRecord.getFieldValue('tranid');

	}
	catch(e)
	{
		errorHandler('initialise', e);
	}

}



/**********************************************************************
 * process Function - doing the processing 
 * 
 * version 1.0.
 **********************************************************************/
function process()
{
	try
	{
		
		checkFulfilStatus();

	}
	catch(e)
	{
		errorHandler('process', e);
	}

}




/**********************************************************************
 * checkFulfilStatus Function - get fulfil record fields and posting journals
 * 
 * version 1.0.1 - 16/05/2013 - making the journals when the status is set to 'Shipped' - AS
 * 
 * NOTE : Status Internal IDs
 * 		A - Picked
 * 		B - Packed
 * 		C - Shipped
 * 
 * 
 **********************************************************************/
function checkFulfilStatus()
{
	//declaring local variables
	var status = '';
	
	try
	{
		createdFromrecordIntID = nlapiGetFieldValue('createdfrom');

		status = nlapiGetFieldValue('shipstatus');							//getting status

		//version 1.0.1
		//if status is shipping
		if(status == 'C')
		{
			getSOFieldsAndItemLines();						//calling the getFieldsAndItemLines Function
			
		}	
		
	}
	catch(e)
	{
		errorHandler('checkFulfilStatus', e);
	}

}


/**********************************************************************
 * getSOFieldsAndItemLines Function - getting sales order fields and line items of SO
 * 
 * version 1.0.2 - including making of journals for P&P items as well
 **********************************************************************/
function getSOFieldsAndItemLines()
{
	//declaring local variables
	var noOfSOLineItems = 0;
	var journalIntID = 0;
	var returnedValue = '';
	var PAndPRecog = 'F';
	
	try
	{
		//loading sales order related to fulfilment
		salesOrderRecord = nlapiLoadRecord('salesorder', createdFromrecordIntID);

		departmentIntID = salesOrderRecord.getFieldValue('department');			//getting department int ID

		noOfSOLineItems = salesOrderRecord.getLineItemCount('item');			//get no of line items in SO
		PAndPRecog = salesOrderRecord.getFieldValue('custbody_pandprecognized');	//getting the 'P&P recognized' field value
	
		//looping through each line item in SO
		for(var i = 1; i <= noOfSOLineItems; i++)
		{
			SOItemIntId = salesOrderRecord.getLineItemValue('item', 'item', i);		//getting  line item internal id
				
			//getting the type of the SO item's line item
			itemType = nlapiLookupField('item', SOItemIntId, 'type');
		
			itemQuantity = salesOrderRecord.getLineItemValue('item', 'quantity', i);	//getting the amount of the line item		
			
			//calling the compareFulfilItems function
			returnedValue = compareFulfilItems();

			//version 1.0.2
			if(((itemType == 'Service') && (PAndPRecog == 'F')) || ItemFound == 'T')
			{
				itemRate = salesOrderRecord.getLineItemValue('item', 'rate', i);		
				itemRate = parseFloat(itemRate);
			
				calculatePrice();								//calling calculatePrice function
				getItemAccountInternalID();						//Calling getItemAccountsInternalIDs function
				journalIntID = postJournals();					//calling postJournals Function

				if((journalIntID > 0) && ItemFound =='T')
				{
					//version 1.0.1
					//setting the journal ref in the column
					fulfillRecord.setLineItemValue('item', 'custcol_revjournalref', returnedValue, journalIntID);		
				}
				else if(itemType == 'Service')
				{
					//setting the 'P&P recognized' field to true
					salesOrderRecord.setFieldValue('custbody_pandprecognized', 'T');

				}

			}

			ItemFound = 'F'; 		//setting ItemFound back to false
		}

		//submitting the records
		nlapiSubmitRecord(fulfillRecord);
		nlapiSubmitRecord(salesOrderRecord);

	}
	catch(e)
	{
		errorHandler('getSOFieldsAndItemLines', e);
	}

}


/**********************************************************************
 * compareFulfilItems Function - compare the SO line items and the fulfilment line items
 * 
 **********************************************************************/
function compareFulfilItems()
{
	var noOfLineItems = 0;
	var retVal = '';
	
	try
	{
		noOfLineItems = nlapiGetLineItemCount('item');						//getting the no of line items in fulfil record
		customerIntID = nlapiGetFieldValue('entity');						//getting customer's internal ID
		fulfilmentDate = nlapiGetFieldValue('trandate');					//getting fulfilment date
		
		//looping through each line item
		for(var i = 1; i <= noOfLineItems; i++)
		{
			itemIntId = nlapiGetLineItemValue('item', 'item', i);			//getting  line item internal id of the fulfilment item
				
			//if the fulfilment item and the SO item is equal
			if(SOItemIntId == itemIntId)
			{
				//set Item is found
				ItemFound = 'T';
			
				itemQuantity = nlapiGetLineItemValue('item', 'quantity', i);	//getting the amount of the line item		
				locationIntID = nlapiGetLineItemValue('item', 'location', i);	//getting location int ID
		
				SOItemIntId = itemIntId;		//setting the SO item to the fulfilment item
				retVal = i;						//return the line item number of the fulfilment record
				return retVal;
			}
		}
	}
	catch(e)
	{
		errorHandler('compareFulfilItems', e);
	}

}


/**********************************************************************
 * calculatePrice Function - calculating the amount (total amount without VAT) of the item
 * 
 * @param itemInternalID - internal id of the item in particular line item
 **********************************************************************/
function calculatePrice()
{
	try
	{
		itemQuantity = parseInt(itemQuantity, 0);
		itemAmount = itemQuantity * itemRate;
		itemAmount = convertToFloat(itemAmount);

	}	
	catch(e)
	{
		errorHandler('calculatePrice', e);

	}
}

/**********************************************************************
 * getItemAccountInternalID Function - getting the item revenue account
 * 
 * @param itemInternalID - internal id of the item in particular line item
 **********************************************************************/
function getItemAccountInternalID()
{
	try
	{
		//getting revenue account id of the particular item in the line
		ItemRevenueAccountIntID = nlapiLookupField('item', SOItemIntId, 'incomeaccount');

	}	
	catch(e)
	{
		errorHandler('getItemAccountsInternalIDs', e);

	}
}


/**********************************************************************
 * postJournals Function - creating and posting the journals into NetSuite
 * 
 * @param amount - amount of the particular line item (the amount to be debited and credited)
 **********************************************************************/
function postJournals()
{
	var journalDesc = '';
	var journalID = 0;
	
	try
	{
		journalDesc = 'Item revenue account to deferred revenue account transfer for Fulfilment: ' +fulfilmentID;

		/*
		 * Creating the journal - Library Function
		 * The format is  : createJournal(totalValue, creditingAccount, debitingAccount, dept, location, subsidiary, jClass, invDate, desc, entity)
		 * 
		 */
		nlapiLogExecution('audit', 'itemAmount', itemAmount);
		nlapiLogExecution('audit', 'rate', itemRate);

		journalID = createJournal(itemAmount, ItemRevenueAccountIntID, deferredRevenueAccountIntID, departmentIntID, locationIntID, 0, 0, fulfilmentDate, journalDesc, customerIntID);
		
	}
	catch(e)
	{

		errorHandler('postJournals', e);
	}

	return journalID;

}
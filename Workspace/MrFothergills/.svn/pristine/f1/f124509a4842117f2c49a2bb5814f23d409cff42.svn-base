/*****************************************************************************
 * Name:        catRequest.js
 * Script Type: User Event
 *
 * Version:     1.0.0 - 26/06/2013 - Initial release - SB
 *
 * Author:      SM,JP,JA FHL
 * 
 * Purpose:     
 * 
 * Script:      
 * Deploy:      
 *              
 * 
 * Notes:       Merging of catalogueRequest and catRequestUE
 * 
 * Library:     Library.js
 *************************************************************************************/

var address = new Object();
var customerId = null;
var email = null;
var brand = null;
var existingCustomer = '';

var salutation = '';
var firstName = '';
var lastName = '';
var phone = '';
var email = '';
var customer = '';

// After Submit
var catReqRecord = null;
var catReqRecordUsed = false;
var newCatRequest = null;
var customer = null;

var catalogue1 = 'F';
var catalogue2 = 'F';
var catalogue3 = 'F';
var catalogue4 = 'F';
var catalogue5 = 'F';

var shipAddress = new Object();
var catalogueMapping = null;
var updateRecord = null;
var date = null;
var catalogues = new Array();


/*
 * before submitting catalogue request
 */
function beforeSubmit(type)
{
    try
    {
        // If creating a new Catalogue Request
        if (type == 'create')
        {
            // Don't do anything if customer already selected
            customerId = nlapiGetFieldValue('custrecord_cr_customer');
            
            if (!customerId)
            {
                setVariables();
                
                // Customer exists
                if (existingCustomer > 0 && email && brand)
                {
                    updateVariables();
                    
                    // If Address 1, City and Zip not empty and don't match a current address, add them
                    findAddress();
                    
                    nlapiSubmitRecord(customer);
                    nlapiSetFieldValue('custrecord_cr_customer', existingCustomer);
                }
                // Customer doesn't exist
                else
                {
                    // Create Customer
                    createCustomer();
                }
            }
        }
    }
    catch(e)
    {
        errorHandler('beforeSubmit', e);
    }
}


/*
 * After Submit function
 */
function afterSubmit(type)
{
    
    var columns = new Array ();
    try
    {
        columns [0] = new nlobjSearchColumn ('name');
        catalogues = nlapiCreateSearch ('customrecord_cataloguerequestmapping', null, columns);
        
        // get current record
        updateRecord = nlapiGetNewRecord();
        catReqRecord = updateRecord;

        shipAddress.line1 = updateRecord.getFieldValue('custrecord_cr_addr1');
        shipAddress.line2 = updateRecord.getFieldValue('custrecord_cr_addr2');
        shipAddress.line3 = updateRecord.getFieldValue('custrecord_cr_addr3');
        shipAddress.city = updateRecord.getFieldValue('custrecord_cr_city');
        shipAddress.state = updateRecord.getFieldValue('custrecord_cr_state');
        shipAddress.zip = updateRecord.getFieldValue('custrecord_cr_zip');

        catalogue1 = updateRecord.getFieldValue('custrecord_cr_cata');
        catalogue2 = updateRecord.getFieldValue('custrecord_cr_catb');
        catalogue3 = updateRecord.getFieldValue('custrecord_cr_catc');
        catalogue4 = updateRecord.getFieldValue('custrecord_cr_catd');
        catalogue5 = updateRecord.getFieldValue('custrecord_cr_catall');


        // get current date and convert to string in user's date format
        date = nlapiDateToString(new Date());

        // get customer from current record
        customer = updateRecord.getId();
        brand = updateRecord.getFieldValue('custrecord_cr_brand');

        if (catalogue1 == 'T')
        {
            catalogueMapping = null;
            // get catalogue request type 1 mapping      
            switch(brand)
            {
                case '1':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('MRF - Cat A'),'custrecord_crmapping_catalogue');
                    break;
                case '2':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('DTB - Cat A'),'custrecord_crmapping_catalogue');
                    break;
                case '3':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('Woolmans - Cat A'),'custrecord_crmapping_catalogue');
                    break;
            }  //switch
            
            submitNewCatRequest();
        } 

        if (catalogue2 == 'T')
        {
            catalogueMapping = null;
            // get catalogue request type 2 mapping
            switch(brand) 
            {
                case '1':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('MRF - Cat B'),'custrecord_crmapping_catalogue');
                    break;
                case '2':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('DTB - Cat B'),'custrecord_crmapping_catalogue');
                    break;
                case '3':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('Woolmans - Cat B'),'custrecord_crmapping_catalogue');
                    break;
            }  //switch
            submitNewCatRequest();
        } 

        if (catalogue3 == 'T')
        {
            catalogueMapping = null;
            // get catalogue request type 3 mapping
            switch(brand) 
            {
                case '1':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('MRF - Cat C'),'custrecord_crmapping_catalogue');
                    break;
                case '2':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('DTB - Cat C'),'custrecord_crmapping_catalogue');
                    break;
                case '3':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('Woolmans - Cat C'),'custrecord_crmapping_catalogue');
                    break;
            }  //switch     
            submitNewCatRequest();
        } 

        if (catalogue4 == 'T')
        {
            catalogueMapping = null;
            // get catalogue request type 4 mapping
            switch(brand) 
            {
                case '1':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('MRF - Cat D'),'custrecord_crmapping_catalogue');
                    break;
                case '2':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('DTB - Cat D'),'custrecord_crmapping_catalogue');
                    break;
                case '3':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('Woolmans - Cat D'),'custrecord_crmapping_catalogue');
                    break;
            }  //switch                  
            submitNewCatRequest();
        } 

        if (catalogue5 == 'T')
        {
            catalogueMapping = null;

            // get catalogue request type 1 mapping
            switch(brand) 
            {
                case '1':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('MRF - Cat ALL'),'custrecord_crmapping_catalogue');
                    break;
                case '2':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('DTB - Cat ALL'),'custrecord_crmapping_catalogue');
                    break;
                case '3':
                    catalogueMapping = nlapiLookupField('customrecord_cataloguerequestmapping',search ('Woolmans - Cat ALL'),'custrecord_crmapping_catalogue');
                    break;
            }  //switch
            submitNewCatRequest ();
        }

        return true;    
    }
    catch (e) 
    {
        errorHandler('afterSubmit', e);
    }

}

/*
 * Load existing variables
 */
function setVariables()
{
    try
    {
        email = nlapiGetFieldValue('custrecord_cr_email');
        brand = nlapiGetFieldValue('custrecord_cr_brand');
        
        existingCustomer = genericSearchTwoParams('customer', 'email', email, 'custentity_mrf_cust_brand', brand);

        salutation = nlapiGetFieldValue('custrecord_cr_salutation');
        firstName = nlapiGetFieldValue('custrecord_cr_firstname');
        lastName = nlapiGetFieldValue('custrecord_cr_lastname');
        address.line1 = nlapiGetFieldValue('custrecord_cr_addr1');
        address.line2 = nlapiGetFieldValue('custrecord_cr_addr2');
        address.line3 = nlapiGetFieldValue('custrecord_cr_addr3');
        address.city = nlapiGetFieldValue('custrecord_cr_city');
        address.state = nlapiGetFieldValue('custrecord_cr_state');
        address.country = 'GB';
        address.zip = nlapiGetFieldValue('custrecord_cr_zip');
        phone = nlapiGetFieldValue('custrecord_cr_phone');
        email = nlapiGetFieldValue('custrecord_cr_email');
    }
    catch(e)
    {
        errorHandler('setVariables', e);
    }
}   

/*
 * Update the existing variables
 */
function updateVariables()
{
    try
    {
        // Update Customer
        customer = nlapiLoadRecord('customer', existingCustomer);
        
        // Update Salutation
        if (salutation)
        {
            customer.setFieldValue('custentity_salutation', salutation);
        }
        
        // Update Phone
        if (phone)
        {
            customer.setFieldValue('phone', phone);
        }   
    }
    catch(e)
    {
        errorHandler('updateVariables', e);
    }
}

/*
 * Find an existing address
 */
function findAddress()
{
    var lineAddress1 = '';
    var lineCity = '';
    var lineZip = null;
    var addressFoundLineNumber = '';
    
    try
    {
        if (address1 && city && zip)
        {
            addressFoundLineNumber = 0;
            // Loop over current addresses
            for (var i = 1; i <= customer.getLineItemCount('addressbook'); i++)
            {
                lineAddress1 = customer.getLineItemValue('addressbook', 'addr1', i);
                lineCity = customer.getLineItemValue('addressbook', 'city', i);
                lineZip = customer.getLineItemValue('addressbook', 'zip', i);
                
                if (lineAddress1.toLowerCase() == address.line1.toLowerCase() &&
                    lineCity.toLowerCase() == address.city.toLowerCase() &&
                    lineZip.toLowerCase() == address.zip.toLowerCase())
                {
                    addressFoundLineNumber = i;
                }
            }
            
            if (addressFoundLineNumber == 0)
            {
                // Add new address
                customer.selectNewLineItem('addressbook');
                customer.setCurrentLineItemValue('addressbook', 'addr1', address.line1);
                customer.setCurrentLineItemValue('addressbook', 'addr2', address.line2);
                customer.setCurrentLineItemValue('addressbook', 'addr3', address.line3);
                customer.setCurrentLineItemValue('addressbook', 'city', address.city);
                customer.setCurrentLineItemValue('addressbook', 'state', address.state);
                customer.setCurrentLineItemValue('addressbook', 'country', address.country);
                customer.setCurrentLineItemValue('addressbook', 'zip', address.zip);
                //customer.setCurrentLineItemValue('addressbook', 'defaultbilling', 'T');
                customer.setCurrentLineItemValue('addressbook', 'defaultshipping', 'T');
                customer.commitLineItem('addressbook');
            }
            else
            {
                customer.selectLineItem('addressbook', addressFoundLineNumber);
                customer.setCurrentLineItemValue('addressbook', 'defaultshipping', 'T');
                customer.commitLineItem('addressbook');
            }
        }
    }
    catch(e)
    {
        errorHandler('findAddress', e);
    }
}

/*
 * Create a new Customer
 */
function createCustomer()
{
    try
    {
        customer = nlapiCreateRecord('lead');

        customer.setFieldValue('custentity_mrf_cust_brand', brand);
        customer.setFieldValue('custentity_salutation', salutation);
        customer.setFieldValue('firstname', firstName);
        customer.setFieldValue('lastname', lastName);
        customer.setFieldValue('phone', phone);
        customer.setFieldValue('email', email);
        customer.setFieldValue('weblead', 'T');

        customer.selectNewLineItem('addressbook');
        customer.setCurrentLineItemValue('addressbook', 'addr1', address.line1);
        customer.setCurrentLineItemValue('addressbook', 'addr2', address.line2);
        customer.setCurrentLineItemValue('addressbook', 'addr3', address.line3);
        customer.setCurrentLineItemValue('addressbook', 'city', address.city);
        customer.setCurrentLineItemValue('addressbook', 'state', address.state);
        customer.setCurrentLineItemValue('addressbook', 'country', address.country);
        customer.setCurrentLineItemValue('addressbook', 'zip', address.zip);
        customer.setCurrentLineItemValue('addressbook', 'defaultbilling', 'T');
        customer.setCurrentLineItemValue('addressbook', 'defaultshipping', 'T');
        customer.commitLineItem('addressbook');

        customerId = nlapiSubmitRecord(customer);
        nlapiSetFieldValue('custrecord_cr_customer', customerId);
    }
    catch(e)
    {
        errorHandler('createCustomer', e);
    }
}


/*
 * Reuse existing Catalogue Request record
 * Use it as the basis for other Requests if necessary
 * Create new record if non exist already
 * @returns nlobjRecord
 */
function newCatReqRecord()
{
    var newRecord = null;

    try
    {
        if (catReqRecordUsed)
        {
            newRecord = nlapiCopyRecord('customrecord_cataloguerequest', catReqRecord.getId());
        }
        else
        {
            newRecord = nlapiLoadRecord('customrecord_cataloguerequest', catReqRecord.getId());
            catReqRecordUsed = true;
        }
    }
    catch (e)
    {
        errorHandler('newCatReqRecord', e);
    }

    return newRecord;
}



/*
 * update Shipping Address
 */
function updateShippingAddress()
{
    try
    {
        newCatRequest.setFieldValue('custrecord_cr_addr1', shipAddress.line1);
        newCatRequest.setFieldValue('custrecord_cr_addr2', shipAddress.line2);
        newCatRequest.setFieldValue('custrecord_cr_addr3', shipAddress.line3);
        newCatRequest.setFieldValue('custrecord_cr_city', shipAddress.city);
        newCatRequest.setFieldValue('custrecord_cr_state', shipAddress.state);
        newCatRequest.setFieldValue('custrecord_cr_zip', shipAddress.zip);
    }
    catch (e)
    {
        errorHandler('updateShippingAddress', e);
    }
}

/*
 * Submits catalogue requests 
 */
function submitNewCatRequest()
{
    try
    {
        // create new catalogue request object
        newCatRequest = newCatReqRecord();

        if (shipAddress.line1)
        {
            updateShippingAddress();
        }

        // set field values

        newCatRequest.setFieldValue('custrecord_cr_catalogue', catalogueMapping);
        newCatRequest.setFieldValue('custrecord_cr_daterequested', date);

        // submit record

        nlapiSubmitRecord(newCatRequest);
    }
    catch (e)
    {
        errorHandler('submitNewCatRequest', e);
    }
}

/*
 * Searches for the internal id from the name
 */
function search(cat)
{
    try
    {
        var retVal = null;
        for (var i = 0; i < catalogues.length; i++)
        {
            if (catalogues[i] == cat)
            {
                retVal = i+1;
            }
        }

        return retVal;
    }
    catch(e)
    {
        errorHandler('search', e);
    }
}